How can my Fastify Node.js webserver code send the contact form information to HubSpot using their API ?

---

To send contact form information to HubSpot using their API in a Fastify Node.js webserver, you can use HubSpot's APIs, such as the Contacts API, Forms API, or any relevant endpoint that fits your use case. Here's a step-by-step guide:

### 1. **Set Up HubSpot API Access**
   - Obtain your HubSpot API key or set up a private app with an access token.
   - Note the endpoint to send data to (e.g., `/crm/v3/objects/contacts` for creating/updating contacts).

### 2. **Install Necessary Dependencies**
   Install `axios` (or your preferred HTTP client library) to make HTTP requests.

   ```bash
   npm install fastify axios
   ```

### 3. **Set Up Your Fastify Webserver**
   Write a Fastify server to handle the form submission.

   ```javascript
   const fastify = require('fastify')({ logger: true });
   const axios = require('axios');

   // Replace this with your HubSpot API key or access token
   const HUBSPOT_API_KEY = 'your-hubspot-api-key';
   const HUBSPOT_BASE_URL = 'https://api.hubapi.com';

   fastify.post('/submit-form', async (request, reply) => {
     try {
       // Extract form data from the request body
       const { firstName, lastName, email, phone } = request.body;

       // Prepare the payload for HubSpot API
       const contactData = {
         properties: {
           firstname: firstName,
           lastname: lastName,
           email,
           phone,
         },
       };

       // Send data to HubSpot Contacts API
       const response = await axios.post(
         `${HUBSPOT_BASE_URL}/crm/v3/objects/contacts`,
         contactData,
         {
           headers: {
             Authorization: `Bearer ${HUBSPOT_API_KEY}`,
             'Content-Type': 'application/json',
           },
         }
       );

       // Respond to the client
       reply.send({ message: 'Contact submitted successfully', data: response.data });
     } catch (error) {
       fastify.log.error(error);
       reply.status(500).send({ error: 'Failed to submit contact' });
     }
   });

   // Start the Fastify server
   fastify.listen({ port: 3000 }, (err, address) => {
     if (err) {
       fastify.log.error(err);
       process.exit(1);
     }
     fastify.log.info(`Server running at ${address}`);
   });
   ```

### 4. **Form Submission Example**
   Here’s how you can send a POST request to your Fastify server using an HTML form or a tool like Postman:

   - **HTML Form**
     ```html
     <form action="http://localhost:3000/submit-form" method="POST">
       <label>First Name: <input type="text" name="firstName" /></label><br />
       <label>Last Name: <input type="text" name="lastName" /></label><br />
       <label>Email: <input type="email" name="email" /></label><br />
       <label>Phone: <input type="tel" name="phone" /></label><br />
       <button type="submit">Submit</button>
     </form>
     ```

   - **Postman Request**
     - Set the URL to `http://localhost:3000/submit-form`.
     - Set the method to `POST`.
     - Set the body type to JSON and include form data like:
       ```json
       {
         "firstName": "John",
         "lastName": "Doe",
         "email": "john.doe@example.com",
         "phone": "1234567890"
       }
       ```

### 5. **Test and Debug**
   - Run your Fastify server: `node server.js`.
   - Submit a form and check the server logs or HubSpot dashboard to verify the contact creation.

### Additional Considerations
- **Validation**: Validate the incoming form data on both the frontend and backend to ensure data integrity.
- **Error Handling**: Implement robust error handling for various scenarios, like invalid API keys, duplicate contacts, or missing data.
- **Security**: Never expose your API key in the frontend. Use environment variables or secure storage for sensitive credentials.
- **Webhook**: Consider setting up a webhook in HubSpot for better two-way integration.

This approach enables you to integrate HubSpot into your Fastify-based web application seamlessly.

---


Could you implement me a HubspotService class that I can use in my Fastify server code ?

---

Here’s an implementation of a `HubspotService` class that you can use in your Fastify server code. The class abstracts away HubSpot API interactions, making it reusable and cleaner.

```javascript
// HubspotService.js
const axios = require('axios');

class HubspotService {
  constructor(apiKey) {
    this.apiKey = apiKey;
    this.baseUrl = 'https://api.hubapi.com';
    this.axiosInstance = axios.create({
      baseURL: this.baseUrl,
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
      },
    });
  }

  // Method to create a new contact in HubSpot
  async createContact(contactData) {
    try {
      const response = await this.axiosInstance.post('/crm/v3/objects/contacts', {
        properties: contactData,
      });
      return response.data;
    } catch (error) {
      console.error('Error creating contact:', error.response?.data || error.message);
      throw new Error('Failed to create contact in HubSpot');
    }
  }

  // Add more methods if needed, e.g., to update, fetch, or delete contacts
}

module.exports = HubspotService;
```

### Usage in Your Fastify Server

Now you can use the `HubspotService` class in your Fastify server code:

```javascript
const fastify = require('fastify')({ logger: true });
const HubspotService = require('./HubspotService');

// Initialize the HubSpot service with your API key
const hubspotService = new HubspotService('your-hubspot-api-key');

fastify.post('/submit-form', async (request, reply) => {
  try {
    // Extract form data from the request body
    const { firstName, lastName, email, phone } = request.body;

    // Prepare contact data
    const contactData = {
      firstname: firstName,
      lastname: lastName,
      email,
      phone,
    };

    // Use HubspotService to create a contact
    const hubspotResponse = await hubspotService.createContact(contactData);

    // Respond to the client
    reply.send({ message: 'Contact submitted successfully', data: hubspotResponse });
  } catch (error) {
    fastify.log.error(error);
    reply.status(500).send({ error: 'Failed to submit contact' });
  }
});

// Start the Fastify server
fastify.listen({ port: 3000 }, (err, address) => {
  if (err) {
    fastify.log.error(err);
    process.exit(1);
  }
  fastify.log.info(`Server running at ${address}`);
});
```

### Explanation

1. **HubspotService**:
   - Encapsulates the API logic for HubSpot.
   - Uses Axios for HTTP requests with pre-configured base URL and headers.

2. **Fastify Server**:
   - Accepts form submissions via the `/submit-form` endpoint.
   - Calls the `createContact` method of `HubspotService` to send data to HubSpot.

3. **Extendability**:
   - Add methods to `HubspotService` for other HubSpot API interactions, like updating or deleting contacts.

This modular approach keeps your server code clean and separates concerns, making it easier to test and maintain.

---

Here is an implementation of a `HubspotService` class that you can use in your Fastify server code. This class encapsulates the logic for communicating with the HubSpot API, making it reusable and easier to manage.

### HubspotService Class

```javascript
const axios = require('axios');

class HubspotService {
  constructor(apiKey) {
    if (!apiKey) {
      throw new Error('HubSpot API key is required');
    }
    this.apiKey = apiKey;
    this.baseUrl = 'https://api.hubapi.com';
    this.axiosInstance = axios.create({
      baseURL: this.baseUrl,
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
      },
    });
  }

  /**
   * Create a new contact in HubSpot
   * @param {Object} contactData - The contact data to send to HubSpot
   * @returns {Promise<Object>} - The created contact data from HubSpot
   */
  async createContact(contactData) {
    try {
      const response = await this.axiosInstance.post('/crm/v3/objects/contacts', {
        properties: contactData,
      });
      return response.data;
    } catch (error) {
      console.error('Failed to create contact:', error.response?.data || error.message);
      throw new Error('Error creating contact in HubSpot');
    }
  }

  /**
   * Update an existing contact by ID
   * @param {string} contactId - The HubSpot ID of the contact to update
   * @param {Object} contactData - The contact data to update
   * @returns {Promise<Object>} - The updated contact data from HubSpot
   */
  async updateContact(contactId, contactData) {
    try {
      const response = await this.axiosInstance.patch(`/crm/v3/objects/contacts/${contactId}`, {
        properties: contactData,
      });
      return response.data;
    } catch (error) {
      console.error('Failed to update contact:', error.response?.data || error.message);
      throw new Error('Error updating contact in HubSpot');
    }
  }

  /**
   * Get a contact by email
   * @param {string} email - The email of the contact to retrieve
   * @returns {Promise<Object>} - The retrieved contact data from HubSpot
   */
  async getContactByEmail(email) {
    try {
      const response = await this.axiosInstance.get('/crm/v3/objects/contacts', {
        params: {
          email,
        },
      });
      return response.data.results[0]; // Assuming the first result is the desired contact
    } catch (error) {
      console.error('Failed to get contact by email:', error.response?.data || error.message);
      throw new Error('Error retrieving contact from HubSpot');
    }
  }
}

module.exports = HubspotService;
```

### Using HubspotService in Your Fastify Server

```javascript
const fastify = require('fastify')({ logger: true });
const HubspotService = require('./HubspotService');

const HUBSPOT_API_KEY = 'your-hubspot-api-key'; // Use environment variables for production
const hubspotService = new HubspotService(HUBSPOT_API_KEY);

fastify.post('/submit-form', async (request, reply) => {
  try {
    const { firstName, lastName, email, phone } = request.body;

    // Create contact data
    const contactData = {
      firstname: firstName,
      lastname: lastName,
      email,
      phone,
    };

    // Send contact data to HubSpot
    const hubspotResponse = await hubspotService.createContact(contactData);

    reply.send({
      message: 'Contact submitted successfully',
      hubspotData: hubspotResponse,
    });
  } catch (error) {
    fastify.log.error(error.message);
    reply.status(500).send({ error: 'Failed to submit contact' });
  }
});

// Start the server
fastify.listen({ port: 3000 }, (err, address) => {
  if (err) {
    fastify.log.error(err);
    process.exit(1);
  }
  fastify.log.info(`Server running at ${address}`);
});
```

### Benefits of the HubspotService Class
- **Encapsulation**: All HubSpot-related logic is encapsulated in one place, making the code modular and reusable.
- **Error Handling**: The service handles errors and provides meaningful error messages.
- **Flexibility**: Easily extend the class with new methods for additional HubSpot API endpoints.
- **Testability**: Mock the `HubspotService` class for unit testing your server routes.

You can add more methods to the `HubspotService` class as needed for your application.
